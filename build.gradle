import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.api.publish.maven.MavenPublication

buildscript {
    repositories {
        mavenCentral()
    }
}
plugins {
    id 'pl.allegro.tech.build.axion-release' version '1.7.0'
    id 'java'
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
}

ext.pluginName = 'Openssh node execution services'
ext.pluginDescription = "Executes a openssh commands on the node. Password Authentication needs sshpass installed on the rundeck server"
ext.sopsCopyright = "Â© 2017, Rundeck, Inc."
ext.sopsUrl = "http://rundeck.com"
ext.buildDateString = new Date().format("yyyy-MM-dd'T'HH:mm:ssX")
ext.archivesBaseName = "openssh-node-execution"
ext.pluginBaseFolder = "."

scmVersion {
    ignoreUncommittedChanges = true
    tag {
        prefix = ''
        versionSeparator = ''
        def origDeserialize = deserialize
        deserialize = { config, position, tagName ->
            def orig = origDeserialize(config, position, tagName)
            if (orig.split('\\.').length < 3) {
                orig += ".0"
            }
            orig
        }
    }
}

project.version = scmVersion.version
ext.archiveFilename = ext.archivesBaseName + '-' + version

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withJavadocJar()
    withSourcesJar()
}

defaultTasks 'build'

tasks.register('pluginZip', Jar) {
    archiveBaseName.set(project.ext.archivesBaseName)
    archiveVersion.set(project.version)
    archiveClassifier.set('')
    destinationDirectory.set(file("build/libs"))
    extension = 'zip'

    from("${project.buildDir}/zip-contents") {
        include("*.yaml")
        include("resources/**")
        include("contents/*")
        into("${archiveBaseName.get()}-${archiveVersion.get()}")
    }

    manifest {
        attributes(
                'Rundeck-Plugin-Name': pluginName.toString(),
                'Rundeck-Plugin-Description': pluginDescription.toString(),
                'Rundeck-Plugin-Archive': 'true',
                'Rundeck-Plugin-File-Version': version,
                'Rundeck-Plugin-Author': sopsCopyright,
                'Rundeck-Plugin-URL': sopsUrl,
                'Rundeck-Plugin-Date': buildDateString
        )
    }
}

tasks.named('pluginZip').configure {
    doFirst {
        def assetsMap = new Properties()
        def tokens = assetsMap + [
                version    : version,
                date       : new Date().format("yyyy-MM-dd'T'HH:mm:ssX").toString(),
                author     : sopsCopyright,
                url        : sopsUrl,
                title      : pluginName,
                description: pluginDescription,
                name       : archivesBaseName.toString(),
        ]

        copy {
            from("${project.projectDir}/resources") {
                include '**/*'
                into "resources"
            }
            from("${project.projectDir}/contents") {
                into "contents"
            }
            from("${project.projectDir}/plugin.yaml") {
                filter(ReplaceTokens, tokens: tokens)
                exclude '**/*.png'
            }
            into "${project.buildDir}/zip-contents"
        }
    }
}

apply plugin: 'maven-publish'

nexusPublishing {
    packageGroup = 'org.rundeck.plugins'
    publications {
        mavenZip(MavenPublication) {
            artifact tasks.named('pluginZip').get()
        }
    }
    repositories {
        sonatype {
            nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
            snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
        }
    }
}

apply from: "${rootDir}/gradle/publishing.gradle"

defaultTasks 'clean', 'build', 'pluginZip'

tasks.named('build').configure {
    dependsOn tasks.named('pluginZip')
}